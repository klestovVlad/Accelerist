/* tslint:disable */
/* eslint-disable */
/**
 * Accelerist
 * The accelerist API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetManyTeamResponseDto } from '../models';
// @ts-ignore
import { UpdateSubscriptionTeamsDto } from '../models';
/**
 * AdminTeamsApi - axios parameter creator
 * @export
 */
export const AdminTeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one Team
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseTeamsCrudControllerTeam: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOneBaseTeamsCrudControllerTeam', 'body', body)
            const localVarPath = `/api/v1/admin/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve many Team
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseTeamsCrudControllerTeam: async (fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }

            if (or) {
                localVarQueryParameter['or'] = or;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve one Team
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseTeamsCrudControllerTeam: async (id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBaseTeamsCrudControllerTeam', 'id', id)
            const localVarPath = `/api/v1/admin/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerDeleteSubscriptionTeam: async (id: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsCrudControllerDeleteSubscriptionTeam', 'id', id)
            const localVarPath = `/api/v1/admin/teams/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerGetSubscriptionTeam: async (id: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsCrudControllerGetSubscriptionTeam', 'id', id)
            const localVarPath = `/api/v1/admin/teams/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Suggested search
         * @param {any} page Starting from which page you want to search
         * @param {any} limit How many results need to be returned
         * @param {any} [q] Starting from which page you want to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerGetSuggested: async (page: any, limit: any, q?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('teamsCrudControllerGetSuggested', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('teamsCrudControllerGetSuggested', 'limit', limit)
            const localVarPath = `/api/v1/admin/teams/suggested`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update team subscription
         * @param {any} id team
         * @param {UpdateSubscriptionTeamsDto} updateSubscriptionTeamsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerUpdateSubscriptionTeam: async (id: any, updateSubscriptionTeamsDto: UpdateSubscriptionTeamsDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsCrudControllerUpdateSubscriptionTeam', 'id', id)
            // verify required parameter 'updateSubscriptionTeamsDto' is not null or undefined
            assertParamExists('teamsCrudControllerUpdateSubscriptionTeam', 'updateSubscriptionTeamsDto', updateSubscriptionTeamsDto)
            const localVarPath = `/api/v1/admin/teams/{id}/subscription`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSubscriptionTeamsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload excel to team
         * @param {any} id team
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerUploadExcel: async (id: any, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teamsCrudControllerUploadExcel', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('teamsCrudControllerUploadExcel', 'file', file)
            const localVarPath = `/api/v1/admin/teams/{id}/upload-excel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one Team
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseTeamsCrudControllerTeam: async (id: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBaseTeamsCrudControllerTeam', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateOneBaseTeamsCrudControllerTeam', 'body', body)
            const localVarPath = `/api/v1/admin/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminTeamsApi - functional programming interface
 * @export
 */
export const AdminTeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminTeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create one Team
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneBaseTeamsCrudControllerTeam(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseTeamsCrudControllerTeam(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve many Team
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManyBaseTeamsCrudControllerTeam(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyTeamResponseDto | Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseTeamsCrudControllerTeam(fields, s, filter, or, sort, join, limit, offset, page, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve one Team
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseTeamsCrudControllerTeam(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseTeamsCrudControllerTeam(id, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCrudControllerDeleteSubscriptionTeam(id: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCrudControllerDeleteSubscriptionTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCrudControllerGetSubscriptionTeam(id: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCrudControllerGetSubscriptionTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Suggested search
         * @param {any} page Starting from which page you want to search
         * @param {any} limit How many results need to be returned
         * @param {any} [q] Starting from which page you want to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCrudControllerGetSuggested(page: any, limit: any, q?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCrudControllerGetSuggested(page, limit, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update team subscription
         * @param {any} id team
         * @param {UpdateSubscriptionTeamsDto} updateSubscriptionTeamsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCrudControllerUpdateSubscriptionTeam(id: any, updateSubscriptionTeamsDto: UpdateSubscriptionTeamsDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCrudControllerUpdateSubscriptionTeam(id, updateSubscriptionTeamsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload excel to team
         * @param {any} id team
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsCrudControllerUploadExcel(id: any, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsCrudControllerUploadExcel(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one Team
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseTeamsCrudControllerTeam(id: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseTeamsCrudControllerTeam(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminTeamsApi - factory interface
 * @export
 */
export const AdminTeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminTeamsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create one Team
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseTeamsCrudControllerTeam(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.createOneBaseTeamsCrudControllerTeam(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve many Team
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseTeamsCrudControllerTeam(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): AxiosPromise<GetManyTeamResponseDto | Array<object>> {
            return localVarFp.getManyBaseTeamsCrudControllerTeam(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve one Team
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseTeamsCrudControllerTeam(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getOneBaseTeamsCrudControllerTeam(id, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerDeleteSubscriptionTeam(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsCrudControllerDeleteSubscriptionTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get team subscription
         * @param {any} id team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerGetSubscriptionTeam(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsCrudControllerGetSubscriptionTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Suggested search
         * @param {any} page Starting from which page you want to search
         * @param {any} limit How many results need to be returned
         * @param {any} [q] Starting from which page you want to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerGetSuggested(page: any, limit: any, q?: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsCrudControllerGetSuggested(page, limit, q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update team subscription
         * @param {any} id team
         * @param {UpdateSubscriptionTeamsDto} updateSubscriptionTeamsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerUpdateSubscriptionTeam(id: any, updateSubscriptionTeamsDto: UpdateSubscriptionTeamsDto, options?: any): AxiosPromise<void> {
            return localVarFp.teamsCrudControllerUpdateSubscriptionTeam(id, updateSubscriptionTeamsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload excel to team
         * @param {any} id team
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsCrudControllerUploadExcel(id: any, file: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsCrudControllerUploadExcel(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one Team
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseTeamsCrudControllerTeam(id: string, body: object, options?: any): AxiosPromise<object> {
            return localVarFp.updateOneBaseTeamsCrudControllerTeam(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneBaseTeamsCrudControllerTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiCreateOneBaseTeamsCrudControllerTeamRequest
 */
export interface AdminTeamsApiCreateOneBaseTeamsCrudControllerTeamRequest {
    /**
     * 
     * @type {object}
     * @memberof AdminTeamsApiCreateOneBaseTeamsCrudControllerTeam
     */
    readonly body: object
}

/**
 * Request parameters for getManyBaseTeamsCrudControllerTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiGetManyBaseTeamsCrudControllerTeamRequest
 */
export interface AdminTeamsApiGetManyBaseTeamsCrudControllerTeamRequest {
    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly fields?: Array<string>

    /**
     * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {string}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly s?: string

    /**
     * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly filter?: Array<string>

    /**
     * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly or?: Array<string>

    /**
     * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly sort?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly join?: Array<string>

    /**
     * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly limit?: number

    /**
     * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly offset?: number

    /**
     * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly page?: number

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof AdminTeamsApiGetManyBaseTeamsCrudControllerTeam
     */
    readonly cache?: number
}

/**
 * Request parameters for getOneBaseTeamsCrudControllerTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiGetOneBaseTeamsCrudControllerTeamRequest
 */
export interface AdminTeamsApiGetOneBaseTeamsCrudControllerTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminTeamsApiGetOneBaseTeamsCrudControllerTeam
     */
    readonly id: string

    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetOneBaseTeamsCrudControllerTeam
     */
    readonly fields?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof AdminTeamsApiGetOneBaseTeamsCrudControllerTeam
     */
    readonly join?: Array<string>

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof AdminTeamsApiGetOneBaseTeamsCrudControllerTeam
     */
    readonly cache?: number
}

/**
 * Request parameters for teamsCrudControllerDeleteSubscriptionTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiTeamsCrudControllerDeleteSubscriptionTeamRequest
 */
export interface AdminTeamsApiTeamsCrudControllerDeleteSubscriptionTeamRequest {
    /**
     * team
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerDeleteSubscriptionTeam
     */
    readonly id: any
}

/**
 * Request parameters for teamsCrudControllerGetSubscriptionTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiTeamsCrudControllerGetSubscriptionTeamRequest
 */
export interface AdminTeamsApiTeamsCrudControllerGetSubscriptionTeamRequest {
    /**
     * team
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerGetSubscriptionTeam
     */
    readonly id: any
}

/**
 * Request parameters for teamsCrudControllerGetSuggested operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiTeamsCrudControllerGetSuggestedRequest
 */
export interface AdminTeamsApiTeamsCrudControllerGetSuggestedRequest {
    /**
     * Starting from which page you want to search
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerGetSuggested
     */
    readonly page: any

    /**
     * How many results need to be returned
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerGetSuggested
     */
    readonly limit: any

    /**
     * Starting from which page you want to search
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerGetSuggested
     */
    readonly q?: any
}

/**
 * Request parameters for teamsCrudControllerUpdateSubscriptionTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeamRequest
 */
export interface AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeamRequest {
    /**
     * team
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeam
     */
    readonly id: any

    /**
     * 
     * @type {UpdateSubscriptionTeamsDto}
     * @memberof AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeam
     */
    readonly updateSubscriptionTeamsDto: UpdateSubscriptionTeamsDto
}

/**
 * Request parameters for teamsCrudControllerUploadExcel operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiTeamsCrudControllerUploadExcelRequest
 */
export interface AdminTeamsApiTeamsCrudControllerUploadExcelRequest {
    /**
     * team
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerUploadExcel
     */
    readonly id: any

    /**
     * 
     * @type {any}
     * @memberof AdminTeamsApiTeamsCrudControllerUploadExcel
     */
    readonly file: any
}

/**
 * Request parameters for updateOneBaseTeamsCrudControllerTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeamRequest
 */
export interface AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeam
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeam
     */
    readonly body: object
}

/**
 * AdminTeamsApi - object-oriented interface
 * @export
 * @class AdminTeamsApi
 * @extends {BaseAPI}
 */
export class AdminTeamsApi extends BaseAPI {
    /**
     * 
     * @summary Create one Team
     * @param {AdminTeamsApiCreateOneBaseTeamsCrudControllerTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public createOneBaseTeamsCrudControllerTeam(requestParameters: AdminTeamsApiCreateOneBaseTeamsCrudControllerTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).createOneBaseTeamsCrudControllerTeam(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve many Team
     * @param {AdminTeamsApiGetManyBaseTeamsCrudControllerTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public getManyBaseTeamsCrudControllerTeam(requestParameters: AdminTeamsApiGetManyBaseTeamsCrudControllerTeamRequest = {}, options?: any) {
        return AdminTeamsApiFp(this.configuration).getManyBaseTeamsCrudControllerTeam(requestParameters.fields, requestParameters.s, requestParameters.filter, requestParameters.or, requestParameters.sort, requestParameters.join, requestParameters.limit, requestParameters.offset, requestParameters.page, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve one Team
     * @param {AdminTeamsApiGetOneBaseTeamsCrudControllerTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public getOneBaseTeamsCrudControllerTeam(requestParameters: AdminTeamsApiGetOneBaseTeamsCrudControllerTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).getOneBaseTeamsCrudControllerTeam(requestParameters.id, requestParameters.fields, requestParameters.join, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete team subscription
     * @param {AdminTeamsApiTeamsCrudControllerDeleteSubscriptionTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public teamsCrudControllerDeleteSubscriptionTeam(requestParameters: AdminTeamsApiTeamsCrudControllerDeleteSubscriptionTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).teamsCrudControllerDeleteSubscriptionTeam(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get team subscription
     * @param {AdminTeamsApiTeamsCrudControllerGetSubscriptionTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public teamsCrudControllerGetSubscriptionTeam(requestParameters: AdminTeamsApiTeamsCrudControllerGetSubscriptionTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).teamsCrudControllerGetSubscriptionTeam(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Suggested search
     * @param {AdminTeamsApiTeamsCrudControllerGetSuggestedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public teamsCrudControllerGetSuggested(requestParameters: AdminTeamsApiTeamsCrudControllerGetSuggestedRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).teamsCrudControllerGetSuggested(requestParameters.page, requestParameters.limit, requestParameters.q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update team subscription
     * @param {AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public teamsCrudControllerUpdateSubscriptionTeam(requestParameters: AdminTeamsApiTeamsCrudControllerUpdateSubscriptionTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).teamsCrudControllerUpdateSubscriptionTeam(requestParameters.id, requestParameters.updateSubscriptionTeamsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload excel to team
     * @param {AdminTeamsApiTeamsCrudControllerUploadExcelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public teamsCrudControllerUploadExcel(requestParameters: AdminTeamsApiTeamsCrudControllerUploadExcelRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).teamsCrudControllerUploadExcel(requestParameters.id, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one Team
     * @param {AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public updateOneBaseTeamsCrudControllerTeam(requestParameters: AdminTeamsApiUpdateOneBaseTeamsCrudControllerTeamRequest, options?: any) {
        return AdminTeamsApiFp(this.configuration).updateOneBaseTeamsCrudControllerTeam(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
