/* tslint:disable */

/* eslint-disable */

/**
 * Accelerist
 * The accelerist API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
import { Configuration } from '../configuration';
// @ts-ignore
import { GetExcelDto } from '../models';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get company contacts
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerContacts: async (
      id: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerContacts', 'id', id);
      const localVarPath = `/api/v1/companies/{id}/contacts`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Dislike company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerDislike: async (
      id: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerDislike', 'id', id);
      const localVarPath = `/api/v1/companies/{id}/dislike`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerFindById: async (
      id: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerFindById', 'id', id);
      const localVarPath = `/api/v1/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetCompanies: async (
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists('companiesControllerGetCompanies', 'page', page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('companiesControllerGetCompanies', 'limit', limit);
      const localVarPath = `/api/v1/companies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sdgGoals) {
        localVarQueryParameter['sdgGoals'] = sdgGoals;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (ethnicities) {
        localVarQueryParameter['ethnicities'] = ethnicities;
      }

      if (income) {
        localVarQueryParameter['income'] = income;
      }

      if (ageRanges) {
        localVarQueryParameter['ageRanges'] = ageRanges;
      }

      if (gender !== undefined) {
        localVarQueryParameter['gender'] = gender;
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q;
      }

      if (industry) {
        localVarQueryParameter['industry'] = industry;
      }

      if (deleteIds) {
        localVarQueryParameter['deleteIds'] = deleteIds;
      }

      if (csrFocusIds) {
        localVarQueryParameter['csrFocusIds'] = csrFocusIds;
      }

      if (affinities) {
        localVarQueryParameter['affinities'] = affinities;
      }

      if (location) {
        localVarQueryParameter['location'] = location;
      }

      if (totalAnnualContributors !== undefined) {
        localVarQueryParameter['totalAnnualContributors'] = totalAnnualContributors;
      }

      if (revenueMin !== undefined) {
        localVarQueryParameter['revenueMin'] = revenueMin;
      }

      if (revenueMax !== undefined) {
        localVarQueryParameter['revenueMax'] = revenueMax;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Export current filtered search result into an excel file
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetExcel: async (
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists('companiesControllerGetExcel', 'page', page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('companiesControllerGetExcel', 'limit', limit);
      const localVarPath = `/api/v1/companies/excel`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sdgGoals) {
        localVarQueryParameter['sdgGoals'] = sdgGoals;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (ethnicities) {
        localVarQueryParameter['ethnicities'] = ethnicities;
      }

      if (income) {
        localVarQueryParameter['income'] = income;
      }

      if (ageRanges) {
        localVarQueryParameter['ageRanges'] = ageRanges;
      }

      if (gender !== undefined) {
        localVarQueryParameter['gender'] = gender;
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q;
      }

      if (industry) {
        localVarQueryParameter['industry'] = industry;
      }

      if (deleteIds) {
        localVarQueryParameter['deleteIds'] = deleteIds;
      }

      if (csrFocusIds) {
        localVarQueryParameter['csrFocusIds'] = csrFocusIds;
      }

      if (affinities) {
        localVarQueryParameter['affinities'] = affinities;
      }

      if (location) {
        localVarQueryParameter['location'] = location;
      }

      if (totalAnnualContributors !== undefined) {
        localVarQueryParameter['totalAnnualContributors'] = totalAnnualContributors;
      }

      if (revenueMin !== undefined) {
        localVarQueryParameter['revenueMin'] = revenueMin;
      }

      if (revenueMax !== undefined) {
        localVarQueryParameter['revenueMax'] = revenueMax;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get favorite companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetFavorites: async (
      page: any,
      limit: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists('companiesControllerGetFavorites', 'page', page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('companiesControllerGetFavorites', 'limit', limit);
      const localVarPath = `/api/v1/companies/favorites`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Suggested search
     * @param {string} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetSuggested: async (
      q?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/companies/suggested`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (q !== undefined) {
        localVarQueryParameter['q'] = q;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Like company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerLike: async (id: any, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerLike', 'id', id);
      const localVarPath = `/api/v1/companies/{id}/like`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get company news
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerNews: async (id: any, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerNews', 'id', id);
      const localVarPath = `/api/v1/companies/{id}/news`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get company scoops
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerScoops: async (
      id: any,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesControllerScoops', 'id', id);
      const localVarPath = `/api/v1/companies/{id}/scoops`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get company contacts
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerContacts(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerContacts(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Dislike company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerDislike(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerDislike(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerFindById(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerFindById(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerGetCompanies(
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerGetCompanies(
          page,
          limit,
          sdgGoals,
          ethnicities,
          income,
          ageRanges,
          gender,
          q,
          industry,
          deleteIds,
          csrFocusIds,
          affinities,
          location,
          totalAnnualContributors,
          revenueMin,
          revenueMax,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Export current filtered search result into an excel file
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerGetExcel(
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExcelDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerGetExcel(
          page,
          limit,
          sdgGoals,
          ethnicities,
          income,
          ageRanges,
          gender,
          q,
          industry,
          deleteIds,
          csrFocusIds,
          affinities,
          location,
          totalAnnualContributors,
          revenueMin,
          revenueMax,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get favorite companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerGetFavorites(
      page: any,
      limit: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerGetFavorites(
          page,
          limit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Suggested search
     * @param {string} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerGetSuggested(
      q?: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesControllerGetSuggested(q, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Like company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerLike(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerLike(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get company news
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerNews(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerNews(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get company scoops
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesControllerScoops(
      id: any,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerScoops(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CompaniesApiFp(configuration);
  return {
    /**
     *
     * @summary Get company contacts
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerContacts(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerContacts(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Dislike company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerDislike(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerDislike(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerFindById(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerFindById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetCompanies(
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .companiesControllerGetCompanies(
          page,
          limit,
          sdgGoals,
          ethnicities,
          income,
          ageRanges,
          gender,
          q,
          industry,
          deleteIds,
          csrFocusIds,
          affinities,
          location,
          totalAnnualContributors,
          revenueMin,
          revenueMax,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Export current filtered search result into an excel file
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {Array<any>} [sdgGoals] SDG goals filter
     * @param {Array<any>} [ethnicities] Array of ethnicities, all lowercase
     * @param {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>} [income] Household income filter
     * @param {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>} [ageRanges] Age ranges filter
     * @param {'male' | 'female' | 'both'} [gender] Gender filter
     * @param {any} [q] Starting from which page you want to search
     * @param {Array<any>} [industry] Indusrty filter
     * @param {Array<any>} [deleteIds]
     * @param {Array<any>} [csrFocusIds] CSR Focus ids
     * @param {Array<any>} [affinities] Affinities filter
     * @param {Array<any>} [location] State/province location filter
     * @param {any} [totalAnnualContributors] Total Annual Contributors filter
     * @param {any} [revenueMin] Revenue min filter
     * @param {any} [revenueMax] Revenue max filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetExcel(
      page: any,
      limit: any,
      sdgGoals?: Array<any>,
      ethnicities?: Array<any>,
      income?: Array<
        | '$100K - $124K'
        | '$125K or More'
        | '$20K - $29K'
        | '$30K - $39K'
        | '$40K - $49K'
        | '$50K - $74K'
        | '$75K - $99K'
        | 'Less than $20K'
      >,
      ageRanges?: Array<
        | '18-20'
        | '21-25'
        | '26-30'
        | '31-35'
        | '36-40'
        | '41-45'
        | '46-50'
        | '51-55'
        | '56-60'
        | '61-65'
        | '66-70'
        | '71-75'
        | '75 +'
      >,
      gender?: 'male' | 'female' | 'both',
      q?: any,
      industry?: Array<any>,
      deleteIds?: Array<any>,
      csrFocusIds?: Array<any>,
      affinities?: Array<any>,
      location?: Array<any>,
      totalAnnualContributors?: any,
      revenueMin?: any,
      revenueMax?: any,
      options?: any,
    ): AxiosPromise<GetExcelDto> {
      return localVarFp
        .companiesControllerGetExcel(
          page,
          limit,
          sdgGoals,
          ethnicities,
          income,
          ageRanges,
          gender,
          q,
          industry,
          deleteIds,
          csrFocusIds,
          affinities,
          location,
          totalAnnualContributors,
          revenueMin,
          revenueMax,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get favorite companies
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetFavorites(
      page: any,
      limit: any,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .companiesControllerGetFavorites(page, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Suggested search
     * @param {string} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerGetSuggested(q?: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerGetSuggested(q, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Like company
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerLike(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerLike(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get company news
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerNews(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerNews(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get company scoops
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesControllerScoops(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .companiesControllerScoops(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for companiesControllerContacts operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerContactsRequest
 */
export interface CompaniesApiCompaniesControllerContactsRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerContacts
   */
  readonly id: any;
}

/**
 * Request parameters for companiesControllerDislike operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerDislikeRequest
 */
export interface CompaniesApiCompaniesControllerDislikeRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerDislike
   */
  readonly id: any;
}

/**
 * Request parameters for companiesControllerFindById operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerFindByIdRequest
 */
export interface CompaniesApiCompaniesControllerFindByIdRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerFindById
   */
  readonly id: any;
}

/**
 * Request parameters for companiesControllerGetCompanies operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerGetCompaniesRequest
 */
export interface CompaniesApiCompaniesControllerGetCompaniesRequest {
  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly page: any;

  /**
   * How many results need to be returned
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly limit: any;

  /**
   * SDG goals filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly sdgGoals?: Array<any>;

  /**
   * Array of ethnicities, all lowercase
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly ethnicities?: Array<any>;

  /**
   * Household income filter
   * @type {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly income?: Array<
    | '$100K - $124K'
    | '$125K or More'
    | '$20K - $29K'
    | '$30K - $39K'
    | '$40K - $49K'
    | '$50K - $74K'
    | '$75K - $99K'
    | 'Less than $20K'
  >;

  /**
   * Age ranges filter
   * @type {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly ageRanges?: Array<
    | '18-20'
    | '21-25'
    | '26-30'
    | '31-35'
    | '36-40'
    | '41-45'
    | '46-50'
    | '51-55'
    | '56-60'
    | '61-65'
    | '66-70'
    | '71-75'
    | '75 +'
  >;

  /**
   * Gender filter
   * @type {'male' | 'female' | 'both'}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly gender?: 'male' | 'female' | 'both';

  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly q?: any;

  /**
   * Indusrty filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly industry?: Array<any>;

  /**
   *
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly deleteIds?: Array<any>;

  /**
   * CSR Focus ids
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly csrFocusIds?: Array<any>;

  /**
   * Affinities filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly affinities?: Array<any>;

  /**
   * State/province location filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly location?: Array<any>;

  /**
   * Total Annual Contributors filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly totalAnnualContributors?: any;

  /**
   * Revenue min filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly revenueMin?: any;

  /**
   * Revenue max filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetCompanies
   */
  readonly revenueMax?: any;
}

/**
 * Request parameters for companiesControllerGetExcel operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerGetExcelRequest
 */
export interface CompaniesApiCompaniesControllerGetExcelRequest {
  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly page: any;

  /**
   * How many results need to be returned
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly limit: any;

  /**
   * SDG goals filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly sdgGoals?: Array<any>;

  /**
   * Array of ethnicities, all lowercase
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly ethnicities?: Array<any>;

  /**
   * Household income filter
   * @type {Array<'$100K - $124K' | '$125K or More' | '$20K - $29K' | '$30K - $39K' | '$40K - $49K' | '$50K - $74K' | '$75K - $99K' | 'Less than $20K'>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly income?: Array<
    | '$100K - $124K'
    | '$125K or More'
    | '$20K - $29K'
    | '$30K - $39K'
    | '$40K - $49K'
    | '$50K - $74K'
    | '$75K - $99K'
    | 'Less than $20K'
  >;

  /**
   * Age ranges filter
   * @type {Array<'18-20' | '21-25' | '26-30' | '31-35' | '36-40' | '41-45' | '46-50' | '51-55' | '56-60' | '61-65' | '66-70' | '71-75' | '75 +'>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly ageRanges?: Array<
    | '18-20'
    | '21-25'
    | '26-30'
    | '31-35'
    | '36-40'
    | '41-45'
    | '46-50'
    | '51-55'
    | '56-60'
    | '61-65'
    | '66-70'
    | '71-75'
    | '75 +'
  >;

  /**
   * Gender filter
   * @type {'male' | 'female' | 'both'}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly gender?: 'male' | 'female' | 'both';

  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly q?: any;

  /**
   * Indusrty filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly industry?: Array<any>;

  /**
   *
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly deleteIds?: Array<any>;

  /**
   * CSR Focus ids
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly csrFocusIds?: Array<any>;

  /**
   * Affinities filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly affinities?: Array<any>;

  /**
   * State/province location filter
   * @type {Array<any>}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly location?: Array<any>;

  /**
   * Total Annual Contributors filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly totalAnnualContributors?: any;

  /**
   * Revenue min filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly revenueMin?: any;

  /**
   * Revenue max filter
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetExcel
   */
  readonly revenueMax?: any;
}

/**
 * Request parameters for companiesControllerGetFavorites operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerGetFavoritesRequest
 */
export interface CompaniesApiCompaniesControllerGetFavoritesRequest {
  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetFavorites
   */
  readonly page: any;

  /**
   * How many results need to be returned
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerGetFavorites
   */
  readonly limit: any;
}

/**
 * Request parameters for companiesControllerGetSuggested operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerGetSuggestedRequest
 */
export interface CompaniesApiCompaniesControllerGetSuggestedRequest {
  /**
   * Starting from which page you want to search
   * @type {string}
   * @memberof CompaniesApiCompaniesControllerGetSuggested
   */
  readonly q?: string;
}

/**
 * Request parameters for companiesControllerLike operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerLikeRequest
 */
export interface CompaniesApiCompaniesControllerLikeRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerLike
   */
  readonly id: any;
}

/**
 * Request parameters for companiesControllerNews operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerNewsRequest
 */
export interface CompaniesApiCompaniesControllerNewsRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerNews
   */
  readonly id: any;
}

/**
 * Request parameters for companiesControllerScoops operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCompaniesControllerScoopsRequest
 */
export interface CompaniesApiCompaniesControllerScoopsRequest {
  /**
   * company
   * @type {any}
   * @memberof CompaniesApiCompaniesControllerScoops
   */
  readonly id: any;
}

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
  /**
   *
   * @summary Get company contacts
   * @param {CompaniesApiCompaniesControllerContactsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerContacts(
    requestParameters: CompaniesApiCompaniesControllerContactsRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerContacts(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Dislike company
   * @param {CompaniesApiCompaniesControllerDislikeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerDislike(
    requestParameters: CompaniesApiCompaniesControllerDislikeRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerDislike(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get company
   * @param {CompaniesApiCompaniesControllerFindByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerFindById(
    requestParameters: CompaniesApiCompaniesControllerFindByIdRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerFindById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get companies
   * @param {CompaniesApiCompaniesControllerGetCompaniesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerGetCompanies(
    requestParameters: CompaniesApiCompaniesControllerGetCompaniesRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerGetCompanies(
        requestParameters.page,
        requestParameters.limit,
        requestParameters.sdgGoals,
        requestParameters.ethnicities,
        requestParameters.income,
        requestParameters.ageRanges,
        requestParameters.gender,
        requestParameters.q,
        requestParameters.industry,
        requestParameters.deleteIds,
        requestParameters.csrFocusIds,
        requestParameters.affinities,
        requestParameters.location,
        requestParameters.totalAnnualContributors,
        requestParameters.revenueMin,
        requestParameters.revenueMax,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Export current filtered search result into an excel file
   * @param {CompaniesApiCompaniesControllerGetExcelRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerGetExcel(
    requestParameters: CompaniesApiCompaniesControllerGetExcelRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerGetExcel(
        requestParameters.page,
        requestParameters.limit,
        requestParameters.sdgGoals,
        requestParameters.ethnicities,
        requestParameters.income,
        requestParameters.ageRanges,
        requestParameters.gender,
        requestParameters.q,
        requestParameters.industry,
        requestParameters.deleteIds,
        requestParameters.csrFocusIds,
        requestParameters.affinities,
        requestParameters.location,
        requestParameters.totalAnnualContributors,
        requestParameters.revenueMin,
        requestParameters.revenueMax,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get favorite companies
   * @param {CompaniesApiCompaniesControllerGetFavoritesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerGetFavorites(
    requestParameters: CompaniesApiCompaniesControllerGetFavoritesRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerGetFavorites(
        requestParameters.page,
        requestParameters.limit,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Suggested search
   * @param {CompaniesApiCompaniesControllerGetSuggestedRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerGetSuggested(
    requestParameters: CompaniesApiCompaniesControllerGetSuggestedRequest = {},
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerGetSuggested(requestParameters.q, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Like company
   * @param {CompaniesApiCompaniesControllerLikeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerLike(
    requestParameters: CompaniesApiCompaniesControllerLikeRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerLike(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get company news
   * @param {CompaniesApiCompaniesControllerNewsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerNews(
    requestParameters: CompaniesApiCompaniesControllerNewsRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerNews(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get company scoops
   * @param {CompaniesApiCompaniesControllerScoopsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompaniesApi
   */
  public companiesControllerScoops(
    requestParameters: CompaniesApiCompaniesControllerScoopsRequest,
    options?: any,
  ) {
    return CompaniesApiFp(this.configuration)
      .companiesControllerScoops(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
