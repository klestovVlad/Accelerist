/* tslint:disable */
/* eslint-disable */
/**
 * Accelerist
 * The accelerist API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { SignInDto } from '../models'
/**
 * AdminAuthorizationApi - axios parameter creator
 * @export
 */
export const AdminAuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerFindById: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Authorization admins
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignIn: async (signInDto: SignInDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'signInDto' is not null or undefined
      assertParamExists('authControllerSignIn', 'signInDto', signInDto)
      const localVarPath = `/api/v1/admin/sign_in`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        signInDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminAuthorizationApi - functional programming interface
 * @export
 */
export const AdminAuthorizationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminAuthorizationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerFindById(
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerFindById(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Authorization admins
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignIn(
      signInDto: SignInDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignIn(
        signInDto,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AdminAuthorizationApi - factory interface
 * @export
 */
export const AdminAuthorizationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminAuthorizationApiFp(configuration)
  return {
    /**
     *
     * @summary Get current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerFindById(options?: any): AxiosPromise<void> {
      return localVarFp.authControllerFindById(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Authorization admins
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignIn(signInDto: SignInDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .authControllerSignIn(signInDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for authControllerSignIn operation in AdminAuthorizationApi.
 * @export
 * @interface AdminAuthorizationApiAuthControllerSignInRequest
 */
export interface AdminAuthorizationApiAuthControllerSignInRequest {
  /**
   *
   * @type {SignInDto}
   * @memberof AdminAuthorizationApiAuthControllerSignIn
   */
  readonly signInDto: SignInDto
}

/**
 * AdminAuthorizationApi - object-oriented interface
 * @export
 * @class AdminAuthorizationApi
 * @extends {BaseAPI}
 */
export class AdminAuthorizationApi extends BaseAPI {
  /**
   *
   * @summary Get current admin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminAuthorizationApi
   */
  public authControllerFindById(options?: any) {
    return AdminAuthorizationApiFp(this.configuration)
      .authControllerFindById(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Authorization admins
   * @param {AdminAuthorizationApiAuthControllerSignInRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminAuthorizationApi
   */
  public authControllerSignIn(
    requestParameters: AdminAuthorizationApiAuthControllerSignInRequest,
    options?: any
  ) {
    return AdminAuthorizationApiFp(this.configuration)
      .authControllerSignIn(requestParameters.signInDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
