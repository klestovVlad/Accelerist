/* tslint:disable */
/* eslint-disable */
/**
 * Accelerist
 * The accelerist API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { GetManyUserResponseDto } from '../models'
// @ts-ignore
import { PasswordChangeDto } from '../models'
/**
 * AdminUserApi - axios parameter creator
 * @export
 */
export const AdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one User
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseUsersCrudControllerUser: async (
      body: object,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('createOneBaseUsersCrudControllerUser', 'body', body)
      const localVarPath = `/api/v1/admin/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve many User
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseUsersCrudControllerUser: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv)
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter
      }

      if (or) {
        localVarQueryParameter['or'] = or
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (join) {
        localVarQueryParameter['join'] = join
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve one User
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseUsersCrudControllerUser: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseUsersCrudControllerUser', 'id', id)
      const localVarPath = `/api/v1/admin/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv)
      }

      if (join) {
        localVarQueryParameter['join'] = join
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update one User
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseUsersCrudControllerUser: async (
      id: string,
      body: object,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBaseUsersCrudControllerUser', 'id', id)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('updateOneBaseUsersCrudControllerUser', 'body', body)
      const localVarPath = `/api/v1/admin/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Password change
     * @param {any} id user
     * @param {PasswordChangeDto} passwordChangeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCrudControllerChangePassword: async (
      id: any,
      passwordChangeDto: PasswordChangeDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersCrudControllerChangePassword', 'id', id)
      // verify required parameter 'passwordChangeDto' is not null or undefined
      assertParamExists('usersCrudControllerChangePassword', 'passwordChangeDto', passwordChangeDto)
      const localVarPath = `/api/v1/admin/users/{id}/change_password`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordChangeDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCrudControllerGetSuggested: async (
      page: any,
      limit: any,
      q?: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists('usersCrudControllerGetSuggested', 'page', page)
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('usersCrudControllerGetSuggested', 'limit', limit)
      const localVarPath = `/api/v1/admin/users/suggested`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminUserApi - functional programming interface
 * @export
 */
export const AdminUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminUserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create one User
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBaseUsersCrudControllerUser(
      body: object,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createOneBaseUsersCrudControllerUser(body, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Retrieve many User
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseUsersCrudControllerUser(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetManyUserResponseDto | Array<object>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseUsersCrudControllerUser(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Retrieve one User
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseUsersCrudControllerUser(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseUsersCrudControllerUser(
        id,
        fields,
        join,
        cache,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Update one User
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseUsersCrudControllerUser(
      id: string,
      body: object,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateOneBaseUsersCrudControllerUser(id, body, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Password change
     * @param {any} id user
     * @param {PasswordChangeDto} passwordChangeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCrudControllerChangePassword(
      id: any,
      passwordChangeDto: PasswordChangeDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCrudControllerChangePassword(
        id,
        passwordChangeDto,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCrudControllerGetSuggested(
      page: any,
      limit: any,
      q?: any,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCrudControllerGetSuggested(
        page,
        limit,
        q,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AdminUserApi - factory interface
 * @export
 */
export const AdminUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminUserApiFp(configuration)
  return {
    /**
     *
     * @summary Create one User
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseUsersCrudControllerUser(body: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .createOneBaseUsersCrudControllerUser(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve many User
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseUsersCrudControllerUser(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): AxiosPromise<GetManyUserResponseDto | Array<object>> {
      return localVarFp
        .getManyBaseUsersCrudControllerUser(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve one User
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseUsersCrudControllerUser(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .getOneBaseUsersCrudControllerUser(id, fields, join, cache, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update one User
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseUsersCrudControllerUser(
      id: string,
      body: object,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .updateOneBaseUsersCrudControllerUser(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Password change
     * @param {any} id user
     * @param {PasswordChangeDto} passwordChangeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCrudControllerChangePassword(
      id: any,
      passwordChangeDto: PasswordChangeDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .usersCrudControllerChangePassword(id, passwordChangeDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCrudControllerGetSuggested(
      page: any,
      limit: any,
      q?: any,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .usersCrudControllerGetSuggested(page, limit, q, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for createOneBaseUsersCrudControllerUser operation in AdminUserApi.
 * @export
 * @interface AdminUserApiCreateOneBaseUsersCrudControllerUserRequest
 */
export interface AdminUserApiCreateOneBaseUsersCrudControllerUserRequest {
  /**
   *
   * @type {object}
   * @memberof AdminUserApiCreateOneBaseUsersCrudControllerUser
   */
  readonly body: object
}

/**
 * Request parameters for getManyBaseUsersCrudControllerUser operation in AdminUserApi.
 * @export
 * @interface AdminUserApiGetManyBaseUsersCrudControllerUserRequest
 */
export interface AdminUserApiGetManyBaseUsersCrudControllerUserRequest {
  /**
   * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly fields?: Array<string>

  /**
   * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {string}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly s?: string

  /**
   * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly filter?: Array<string>

  /**
   * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly or?: Array<string>

  /**
   * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly sort?: Array<string>

  /**
   * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly join?: Array<string>

  /**
   * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly limit?: number

  /**
   * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly offset?: number

  /**
   * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly page?: number

  /**
   * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminUserApiGetManyBaseUsersCrudControllerUser
   */
  readonly cache?: number
}

/**
 * Request parameters for getOneBaseUsersCrudControllerUser operation in AdminUserApi.
 * @export
 * @interface AdminUserApiGetOneBaseUsersCrudControllerUserRequest
 */
export interface AdminUserApiGetOneBaseUsersCrudControllerUserRequest {
  /**
   *
   * @type {string}
   * @memberof AdminUserApiGetOneBaseUsersCrudControllerUser
   */
  readonly id: string

  /**
   * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetOneBaseUsersCrudControllerUser
   */
  readonly fields?: Array<string>

  /**
   * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminUserApiGetOneBaseUsersCrudControllerUser
   */
  readonly join?: Array<string>

  /**
   * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminUserApiGetOneBaseUsersCrudControllerUser
   */
  readonly cache?: number
}

/**
 * Request parameters for updateOneBaseUsersCrudControllerUser operation in AdminUserApi.
 * @export
 * @interface AdminUserApiUpdateOneBaseUsersCrudControllerUserRequest
 */
export interface AdminUserApiUpdateOneBaseUsersCrudControllerUserRequest {
  /**
   *
   * @type {string}
   * @memberof AdminUserApiUpdateOneBaseUsersCrudControllerUser
   */
  readonly id: string

  /**
   *
   * @type {object}
   * @memberof AdminUserApiUpdateOneBaseUsersCrudControllerUser
   */
  readonly body: object
}

/**
 * Request parameters for usersCrudControllerChangePassword operation in AdminUserApi.
 * @export
 * @interface AdminUserApiUsersCrudControllerChangePasswordRequest
 */
export interface AdminUserApiUsersCrudControllerChangePasswordRequest {
  /**
   * user
   * @type {any}
   * @memberof AdminUserApiUsersCrudControllerChangePassword
   */
  readonly id: any

  /**
   *
   * @type {PasswordChangeDto}
   * @memberof AdminUserApiUsersCrudControllerChangePassword
   */
  readonly passwordChangeDto: PasswordChangeDto
}

/**
 * Request parameters for usersCrudControllerGetSuggested operation in AdminUserApi.
 * @export
 * @interface AdminUserApiUsersCrudControllerGetSuggestedRequest
 */
export interface AdminUserApiUsersCrudControllerGetSuggestedRequest {
  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof AdminUserApiUsersCrudControllerGetSuggested
   */
  readonly page: any

  /**
   * How many results need to be returned
   * @type {any}
   * @memberof AdminUserApiUsersCrudControllerGetSuggested
   */
  readonly limit: any

  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof AdminUserApiUsersCrudControllerGetSuggested
   */
  readonly q?: any
}

/**
 * AdminUserApi - object-oriented interface
 * @export
 * @class AdminUserApi
 * @extends {BaseAPI}
 */
export class AdminUserApi extends BaseAPI {
  /**
   *
   * @summary Create one User
   * @param {AdminUserApiCreateOneBaseUsersCrudControllerUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public createOneBaseUsersCrudControllerUser(
    requestParameters: AdminUserApiCreateOneBaseUsersCrudControllerUserRequest,
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .createOneBaseUsersCrudControllerUser(requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve many User
   * @param {AdminUserApiGetManyBaseUsersCrudControllerUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public getManyBaseUsersCrudControllerUser(
    requestParameters: AdminUserApiGetManyBaseUsersCrudControllerUserRequest = {},
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .getManyBaseUsersCrudControllerUser(
        requestParameters.fields,
        requestParameters.s,
        requestParameters.filter,
        requestParameters.or,
        requestParameters.sort,
        requestParameters.join,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.page,
        requestParameters.cache,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve one User
   * @param {AdminUserApiGetOneBaseUsersCrudControllerUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public getOneBaseUsersCrudControllerUser(
    requestParameters: AdminUserApiGetOneBaseUsersCrudControllerUserRequest,
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .getOneBaseUsersCrudControllerUser(
        requestParameters.id,
        requestParameters.fields,
        requestParameters.join,
        requestParameters.cache,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update one User
   * @param {AdminUserApiUpdateOneBaseUsersCrudControllerUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public updateOneBaseUsersCrudControllerUser(
    requestParameters: AdminUserApiUpdateOneBaseUsersCrudControllerUserRequest,
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .updateOneBaseUsersCrudControllerUser(requestParameters.id, requestParameters.body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Password change
   * @param {AdminUserApiUsersCrudControllerChangePasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public usersCrudControllerChangePassword(
    requestParameters: AdminUserApiUsersCrudControllerChangePasswordRequest,
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .usersCrudControllerChangePassword(
        requestParameters.id,
        requestParameters.passwordChangeDto,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Suggested search
   * @param {AdminUserApiUsersCrudControllerGetSuggestedRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApi
   */
  public usersCrudControllerGetSuggested(
    requestParameters: AdminUserApiUsersCrudControllerGetSuggestedRequest,
    options?: any
  ) {
    return AdminUserApiFp(this.configuration)
      .usersCrudControllerGetSuggested(
        requestParameters.page,
        requestParameters.limit,
        requestParameters.q,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
