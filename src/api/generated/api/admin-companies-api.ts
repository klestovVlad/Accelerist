/* tslint:disable */

/* eslint-disable */

/**
 * Accelerist
 * The accelerist API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
import { Configuration } from '../configuration';
// @ts-ignore
import { ContactGetDto } from '../models';
// @ts-ignore
import { CreateCompanyDto } from '../models';
// @ts-ignore
import { CreateContactDto } from '../models';
// @ts-ignore
import { GetManyCompanyResponseDto } from '../models';
// @ts-ignore
import { UpdateCompanyDto } from '../models';
// @ts-ignore
import { UpdateContactDto } from '../models';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

/**
 * AdminCompaniesApi - axios parameter creator
 * @export
 */
export const AdminCompaniesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerGetSuggested: async (
      page: any,
      limit: any,
      q?: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists('companiesCrudControllerGetSuggested', 'page', page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('companiesCrudControllerGetSuggested', 'limit', limit);
      const localVarPath = `/api/v1/admin/companies/suggested`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update company through ZoomInfo
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerUpdateCompany: async (
      id: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesCrudControllerUpdateCompany', 'id', id);
      const localVarPath =
        `/api/v1/admin/companies/{id}/update-company`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upload excel to company
     * @param {any} id company
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerUploadExcel: async (
      id: any,
      file: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('companiesCrudControllerUploadExcel', 'id', id);
      // verify required parameter 'file' is not null or undefined
      assertParamExists('companiesCrudControllerUploadExcel', 'file', file);
      const localVarPath = `/api/v1/admin/companies/{id}/upload-excel`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append('file', file as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create one Contact
     * @param {string} companyId
     * @param {CreateContactDto} createContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseAdminContactsContrrolerContact: async (
      companyId: string,
      createContactDto: CreateContactDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'createOneBaseAdminContactsContrrolerContact',
        'companyId',
        companyId
      );
      // verify required parameter 'createContactDto' is not null or undefined
      assertParamExists(
        'createOneBaseAdminContactsContrrolerContact',
        'createContactDto',
        createContactDto
      );
      const localVarPath =
        `/api/v1/admin/companies/{companyId}/contacts`.replace(
          `{${'companyId'}}`,
          encodeURIComponent(String(companyId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createContactDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create one Company
     * @param {CreateCompanyDto} createCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseCompaniesCrudControllerCompany: async (
      createCompanyDto: CreateCompanyDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCompanyDto' is not null or undefined
      assertParamExists(
        'createOneBaseCompaniesCrudControllerCompany',
        'createCompanyDto',
        createCompanyDto
      );
      const localVarPath = `/api/v1/admin/companies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCompanyDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseAdminContactsContrrolerContact: async (
      companyId: string,
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'deleteOneBaseAdminContactsContrrolerContact',
        'companyId',
        companyId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'deleteOneBaseAdminContactsContrrolerContact',
        'id',
        id
      );
      const localVarPath = `/api/v1/admin/companies/{companyId}/contacts/{id}`
        .replace(`{${'companyId'}}`, encodeURIComponent(String(companyId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one Company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseCompaniesCrudControllerCompany: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'deleteOneBaseCompaniesCrudControllerCompany',
        'id',
        id
      );
      const localVarPath = `/api/v1/admin/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Contact
     * @param {string} companyId
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseAdminContactsContrrolerContact: async (
      companyId: string,
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'getManyBaseAdminContactsContrrolerContact',
        'companyId',
        companyId
      );
      const localVarPath =
        `/api/v1/admin/companies/{companyId}/contacts`.replace(
          `{${'companyId'}}`,
          encodeURIComponent(String(companyId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Company
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCompaniesCrudControllerCompany: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/companies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one Company
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCompaniesCrudControllerCompany: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseCompaniesCrudControllerCompany', 'id', id);
      const localVarPath = `/api/v1/admin/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {UpdateContactDto} updateContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseAdminContactsContrrolerContact: async (
      companyId: string,
      id: string,
      updateContactDto: UpdateContactDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'updateOneBaseAdminContactsContrrolerContact',
        'companyId',
        companyId
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'updateOneBaseAdminContactsContrrolerContact',
        'id',
        id
      );
      // verify required parameter 'updateContactDto' is not null or undefined
      assertParamExists(
        'updateOneBaseAdminContactsContrrolerContact',
        'updateContactDto',
        updateContactDto
      );
      const localVarPath = `/api/v1/admin/companies/{companyId}/contacts/{id}`
        .replace(`{${'companyId'}}`, encodeURIComponent(String(companyId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateContactDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one Company
     * @param {string} id
     * @param {UpdateCompanyDto} updateCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseCompaniesCrudControllerCompany: async (
      id: string,
      updateCompanyDto: UpdateCompanyDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'updateOneBaseCompaniesCrudControllerCompany',
        'id',
        id
      );
      // verify required parameter 'updateCompanyDto' is not null or undefined
      assertParamExists(
        'updateOneBaseCompaniesCrudControllerCompany',
        'updateCompanyDto',
        updateCompanyDto
      );
      const localVarPath = `/api/v1/admin/companies/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCompanyDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminCompaniesApi - functional programming interface
 * @export
 */
export const AdminCompaniesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AdminCompaniesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesCrudControllerGetSuggested(
      page: any,
      limit: any,
      q?: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesCrudControllerGetSuggested(
          page,
          limit,
          q,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update company through ZoomInfo
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesCrudControllerUpdateCompany(
      id: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesCrudControllerUpdateCompany(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Upload excel to company
     * @param {any} id company
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async companiesCrudControllerUploadExcel(
      id: any,
      file: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.companiesCrudControllerUploadExcel(
          id,
          file,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create one Contact
     * @param {string} companyId
     * @param {CreateContactDto} createContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBaseAdminContactsContrrolerContact(
      companyId: string,
      createContactDto: CreateContactDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactGetDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createOneBaseAdminContactsContrrolerContact(
          companyId,
          createContactDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create one Company
     * @param {CreateCompanyDto} createCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBaseCompaniesCrudControllerCompany(
      createCompanyDto: CreateCompanyDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createOneBaseCompaniesCrudControllerCompany(
          createCompanyDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBaseAdminContactsContrrolerContact(
      companyId: string,
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteOneBaseAdminContactsContrrolerContact(
          companyId,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete one Company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBaseCompaniesCrudControllerCompany(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteOneBaseCompaniesCrudControllerCompany(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Retrieve many Contact
     * @param {string} companyId
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseAdminContactsContrrolerContact(
      companyId: string,
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ContactGetDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getManyBaseAdminContactsContrrolerContact(
          companyId,
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Retrieve many Company
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseCompaniesCrudControllerCompany(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetManyCompanyResponseDto | Array<object>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getManyBaseCompaniesCrudControllerCompany(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Retrieve one Company
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseCompaniesCrudControllerCompany(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOneBaseCompaniesCrudControllerCompany(
          id,
          fields,
          join,
          cache,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {UpdateContactDto} updateContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseAdminContactsContrrolerContact(
      companyId: string,
      id: string,
      updateContactDto: UpdateContactDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactGetDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateOneBaseAdminContactsContrrolerContact(
          companyId,
          id,
          updateContactDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update one Company
     * @param {string} id
     * @param {UpdateCompanyDto} updateCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseCompaniesCrudControllerCompany(
      id: string,
      updateCompanyDto: UpdateCompanyDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateOneBaseCompaniesCrudControllerCompany(
          id,
          updateCompanyDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AdminCompaniesApi - factory interface
 * @export
 */
export const AdminCompaniesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminCompaniesApiFp(configuration);
  return {
    /**
     *
     * @summary Suggested search
     * @param {any} page Starting from which page you want to search
     * @param {any} limit How many results need to be returned
     * @param {any} [q] Starting from which page you want to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerGetSuggested(
      page: any,
      limit: any,
      q?: any,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .companiesCrudControllerGetSuggested(page, limit, q, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update company through ZoomInfo
     * @param {any} id company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerUpdateCompany(
      id: any,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .companiesCrudControllerUpdateCompany(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload excel to company
     * @param {any} id company
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCrudControllerUploadExcel(
      id: any,
      file: any,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .companiesCrudControllerUploadExcel(id, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create one Contact
     * @param {string} companyId
     * @param {CreateContactDto} createContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseAdminContactsContrrolerContact(
      companyId: string,
      createContactDto: CreateContactDto,
      options?: any
    ): AxiosPromise<ContactGetDto> {
      return localVarFp
        .createOneBaseAdminContactsContrrolerContact(
          companyId,
          createContactDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create one Company
     * @param {CreateCompanyDto} createCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseCompaniesCrudControllerCompany(
      createCompanyDto: CreateCompanyDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .createOneBaseCompaniesCrudControllerCompany(createCompanyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseAdminContactsContrrolerContact(
      companyId: string,
      id: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOneBaseAdminContactsContrrolerContact(companyId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one Company
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseCompaniesCrudControllerCompany(
      id: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOneBaseCompaniesCrudControllerCompany(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Contact
     * @param {string} companyId
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseAdminContactsContrrolerContact(
      companyId: string,
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): AxiosPromise<Array<ContactGetDto>> {
      return localVarFp
        .getManyBaseAdminContactsContrrolerContact(
          companyId,
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Company
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCompaniesCrudControllerCompany(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any
    ): AxiosPromise<GetManyCompanyResponseDto | Array<object>> {
      return localVarFp
        .getManyBaseCompaniesCrudControllerCompany(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one Company
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCompaniesCrudControllerCompany(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .getOneBaseCompaniesCrudControllerCompany(
          id,
          fields,
          join,
          cache,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one Contact
     * @param {string} companyId
     * @param {string} id
     * @param {UpdateContactDto} updateContactDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseAdminContactsContrrolerContact(
      companyId: string,
      id: string,
      updateContactDto: UpdateContactDto,
      options?: any
    ): AxiosPromise<ContactGetDto> {
      return localVarFp
        .updateOneBaseAdminContactsContrrolerContact(
          companyId,
          id,
          updateContactDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one Company
     * @param {string} id
     * @param {UpdateCompanyDto} updateCompanyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseCompaniesCrudControllerCompany(
      id: string,
      updateCompanyDto: UpdateCompanyDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .updateOneBaseCompaniesCrudControllerCompany(
          id,
          updateCompanyDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for companiesCrudControllerGetSuggested operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiCompaniesCrudControllerGetSuggestedRequest
 */
export interface AdminCompaniesApiCompaniesCrudControllerGetSuggestedRequest {
  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerGetSuggested
   */
  readonly page: any;

  /**
   * How many results need to be returned
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerGetSuggested
   */
  readonly limit: any;

  /**
   * Starting from which page you want to search
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerGetSuggested
   */
  readonly q?: any;
}

/**
 * Request parameters for companiesCrudControllerUpdateCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiCompaniesCrudControllerUpdateCompanyRequest
 */
export interface AdminCompaniesApiCompaniesCrudControllerUpdateCompanyRequest {
  /**
   * company
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerUpdateCompany
   */
  readonly id: any;
}

/**
 * Request parameters for companiesCrudControllerUploadExcel operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiCompaniesCrudControllerUploadExcelRequest
 */
export interface AdminCompaniesApiCompaniesCrudControllerUploadExcelRequest {
  /**
   * company
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerUploadExcel
   */
  readonly id: any;

  /**
   *
   * @type {any}
   * @memberof AdminCompaniesApiCompaniesCrudControllerUploadExcel
   */
  readonly file: any;
}

/**
 * Request parameters for createOneBaseAdminContactsContrrolerContact operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContactRequest
 */
export interface AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContactRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContact
   */
  readonly companyId: string;

  /**
   *
   * @type {CreateContactDto}
   * @memberof AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContact
   */
  readonly createContactDto: CreateContactDto;
}

/**
 * Request parameters for createOneBaseCompaniesCrudControllerCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiCreateOneBaseCompaniesCrudControllerCompanyRequest
 */
export interface AdminCompaniesApiCreateOneBaseCompaniesCrudControllerCompanyRequest {
  /**
   *
   * @type {CreateCompanyDto}
   * @memberof AdminCompaniesApiCreateOneBaseCompaniesCrudControllerCompany
   */
  readonly createCompanyDto: CreateCompanyDto;
}

/**
 * Request parameters for deleteOneBaseAdminContactsContrrolerContact operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContactRequest
 */
export interface AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContactRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContact
   */
  readonly companyId: string;

  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContact
   */
  readonly id: string;
}

/**
 * Request parameters for deleteOneBaseCompaniesCrudControllerCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiDeleteOneBaseCompaniesCrudControllerCompanyRequest
 */
export interface AdminCompaniesApiDeleteOneBaseCompaniesCrudControllerCompanyRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiDeleteOneBaseCompaniesCrudControllerCompany
   */
  readonly id: string;
}

/**
 * Request parameters for getManyBaseAdminContactsContrrolerContact operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiGetManyBaseAdminContactsContrrolerContactRequest
 */
export interface AdminCompaniesApiGetManyBaseAdminContactsContrrolerContactRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly companyId: string;

  /**
   * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly fields?: Array<string>;

  /**
   * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {string}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly s?: string;

  /**
   * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly filter?: Array<string>;

  /**
   * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly or?: Array<string>;

  /**
   * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly sort?: Array<string>;

  /**
   * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly join?: Array<string>;

  /**
   * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly limit?: number;

  /**
   * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly offset?: number;

  /**
   * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly page?: number;

  /**
   * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseAdminContactsContrrolerContact
   */
  readonly cache?: number;
}

/**
 * Request parameters for getManyBaseCompaniesCrudControllerCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompanyRequest
 */
export interface AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompanyRequest {
  /**
   * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly fields?: Array<string>;

  /**
   * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {string}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly s?: string;

  /**
   * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly filter?: Array<string>;

  /**
   * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly or?: Array<string>;

  /**
   * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly sort?: Array<string>;

  /**
   * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly join?: Array<string>;

  /**
   * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly limit?: number;

  /**
   * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly offset?: number;

  /**
   * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly page?: number;

  /**
   * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompany
   */
  readonly cache?: number;
}

/**
 * Request parameters for getOneBaseCompaniesCrudControllerCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompanyRequest
 */
export interface AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompanyRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompany
   */
  readonly id: string;

  /**
   * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompany
   */
  readonly fields?: Array<string>;

  /**
   * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {Array<string>}
   * @memberof AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompany
   */
  readonly join?: Array<string>;

  /**
   * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @type {number}
   * @memberof AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompany
   */
  readonly cache?: number;
}

/**
 * Request parameters for updateOneBaseAdminContactsContrrolerContact operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContactRequest
 */
export interface AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContactRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContact
   */
  readonly companyId: string;

  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContact
   */
  readonly id: string;

  /**
   *
   * @type {UpdateContactDto}
   * @memberof AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContact
   */
  readonly updateContactDto: UpdateContactDto;
}

/**
 * Request parameters for updateOneBaseCompaniesCrudControllerCompany operation in AdminCompaniesApi.
 * @export
 * @interface AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompanyRequest
 */
export interface AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompanyRequest {
  /**
   *
   * @type {string}
   * @memberof AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompany
   */
  readonly id: string;

  /**
   *
   * @type {UpdateCompanyDto}
   * @memberof AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompany
   */
  readonly updateCompanyDto: UpdateCompanyDto;
}

/**
 * AdminCompaniesApi - object-oriented interface
 * @export
 * @class AdminCompaniesApi
 * @extends {BaseAPI}
 */
export class AdminCompaniesApi extends BaseAPI {
  /**
   *
   * @summary Suggested search
   * @param {AdminCompaniesApiCompaniesCrudControllerGetSuggestedRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public companiesCrudControllerGetSuggested(
    requestParameters: AdminCompaniesApiCompaniesCrudControllerGetSuggestedRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .companiesCrudControllerGetSuggested(
        requestParameters.page,
        requestParameters.limit,
        requestParameters.q,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update company through ZoomInfo
   * @param {AdminCompaniesApiCompaniesCrudControllerUpdateCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public companiesCrudControllerUpdateCompany(
    requestParameters: AdminCompaniesApiCompaniesCrudControllerUpdateCompanyRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .companiesCrudControllerUpdateCompany(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload excel to company
   * @param {AdminCompaniesApiCompaniesCrudControllerUploadExcelRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public companiesCrudControllerUploadExcel(
    requestParameters: AdminCompaniesApiCompaniesCrudControllerUploadExcelRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .companiesCrudControllerUploadExcel(
        requestParameters.id,
        requestParameters.file,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create one Contact
   * @param {AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContactRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public createOneBaseAdminContactsContrrolerContact(
    requestParameters: AdminCompaniesApiCreateOneBaseAdminContactsContrrolerContactRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .createOneBaseAdminContactsContrrolerContact(
        requestParameters.companyId,
        requestParameters.createContactDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create one Company
   * @param {AdminCompaniesApiCreateOneBaseCompaniesCrudControllerCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public createOneBaseCompaniesCrudControllerCompany(
    requestParameters: AdminCompaniesApiCreateOneBaseCompaniesCrudControllerCompanyRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .createOneBaseCompaniesCrudControllerCompany(
        requestParameters.createCompanyDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one Contact
   * @param {AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContactRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public deleteOneBaseAdminContactsContrrolerContact(
    requestParameters: AdminCompaniesApiDeleteOneBaseAdminContactsContrrolerContactRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .deleteOneBaseAdminContactsContrrolerContact(
        requestParameters.companyId,
        requestParameters.id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one Company
   * @param {AdminCompaniesApiDeleteOneBaseCompaniesCrudControllerCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public deleteOneBaseCompaniesCrudControllerCompany(
    requestParameters: AdminCompaniesApiDeleteOneBaseCompaniesCrudControllerCompanyRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .deleteOneBaseCompaniesCrudControllerCompany(
        requestParameters.id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Contact
   * @param {AdminCompaniesApiGetManyBaseAdminContactsContrrolerContactRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public getManyBaseAdminContactsContrrolerContact(
    requestParameters: AdminCompaniesApiGetManyBaseAdminContactsContrrolerContactRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .getManyBaseAdminContactsContrrolerContact(
        requestParameters.companyId,
        requestParameters.fields,
        requestParameters.s,
        requestParameters.filter,
        requestParameters.or,
        requestParameters.sort,
        requestParameters.join,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.page,
        requestParameters.cache,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Company
   * @param {AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public getManyBaseCompaniesCrudControllerCompany(
    requestParameters: AdminCompaniesApiGetManyBaseCompaniesCrudControllerCompanyRequest = {},
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .getManyBaseCompaniesCrudControllerCompany(
        requestParameters.fields,
        requestParameters.s,
        requestParameters.filter,
        requestParameters.or,
        requestParameters.sort,
        requestParameters.join,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.page,
        requestParameters.cache,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one Company
   * @param {AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public getOneBaseCompaniesCrudControllerCompany(
    requestParameters: AdminCompaniesApiGetOneBaseCompaniesCrudControllerCompanyRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .getOneBaseCompaniesCrudControllerCompany(
        requestParameters.id,
        requestParameters.fields,
        requestParameters.join,
        requestParameters.cache,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one Contact
   * @param {AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContactRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public updateOneBaseAdminContactsContrrolerContact(
    requestParameters: AdminCompaniesApiUpdateOneBaseAdminContactsContrrolerContactRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .updateOneBaseAdminContactsContrrolerContact(
        requestParameters.companyId,
        requestParameters.id,
        requestParameters.updateContactDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one Company
   * @param {AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompanyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminCompaniesApi
   */
  public updateOneBaseCompaniesCrudControllerCompany(
    requestParameters: AdminCompaniesApiUpdateOneBaseCompaniesCrudControllerCompanyRequest,
    options?: any
  ) {
    return AdminCompaniesApiFp(this.configuration)
      .updateOneBaseCompaniesCrudControllerCompany(
        requestParameters.id,
        requestParameters.updateCompanyDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
